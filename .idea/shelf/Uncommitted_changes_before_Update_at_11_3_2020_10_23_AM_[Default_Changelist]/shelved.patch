Index: app/src/main/java/com/mahitab/ecommerce/fragments/CartFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mahitab.ecommerce.fragments;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.Button;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.recyclerview.widget.LinearLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.google.android.material.badge.BadgeDrawable;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.mahitab.ecommerce.R;\r\nimport com.mahitab.ecommerce.activities.HomeActivity;\r\nimport com.mahitab.ecommerce.activities.PaymentWebViewActivity;\r\nimport com.mahitab.ecommerce.activities.ProductDetailsActivity;\r\nimport com.mahitab.ecommerce.adapters.CartAdapter;\r\nimport com.mahitab.ecommerce.managers.DataManager;\r\nimport com.mahitab.ecommerce.managers.GraphClientManager;\r\nimport com.mahitab.ecommerce.models.CartItemQuantity;\r\nimport com.shopify.buy3.GraphCall;\r\nimport com.shopify.buy3.GraphError;\r\nimport com.shopify.buy3.GraphResponse;\r\nimport com.shopify.buy3.Storefront;\r\nimport com.shopify.graphql.support.ID;\r\nimport com.shopify.graphql.support.Input;\r\n\r\nimport java.io.Serializable;\r\nimport java.text.NumberFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class CartFragment extends Fragment implements CartAdapter.CartProductClickListener, SharedPreferences.OnSharedPreferenceChangeListener {\r\n\r\n    private RecyclerView rvCartProducts;\r\n    private List<CartItemQuantity> cartProducts;\r\n    private CartAdapter cartAdapter;\r\n\r\n    private LinearLayout llEmptyCart;\r\n    private LinearLayout llContentCart;\r\n\r\n    private TextView tvSubTotalPrice;\r\n\r\n    private SharedPreferences defaultPreferences;\r\n\r\n    public CartFragment() {\r\n        // Required empty public constructor\r\n    }\r\n\r\n    @Override\r\n    public void onAttach(@NonNull Context context) {\r\n        super.onAttach(context);\r\n        defaultPreferences = context.getSharedPreferences(context.getPackageName(), Context.MODE_PRIVATE);\r\n    }\r\n\r\n    @Override\r\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\r\n                             Bundle savedInstanceState) {\r\n        // Inflate the layout for this fragment\r\n        return inflater.inflate(R.layout.fragment_cart, container, false);\r\n    }\r\n\r\n    @Override\r\n    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\r\n        super.onViewCreated(view, savedInstanceState);\r\n\r\n        initView(view);\r\n    }\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        if (defaultPreferences.getString(\"cartProducts\", null) == null)\r\n            cartProducts = new ArrayList<>();\r\n        else\r\n            cartProducts = new Gson().fromJson(defaultPreferences.getString(\"cartProducts\", null), new TypeToken<List<CartItemQuantity>>() {\r\n            }.getType());\r\n\r\n\r\n        displaySuitableLayout();\r\n\r\n        rvCartProducts.setHasFixedSize(true);\r\n        rvCartProducts.setLayoutManager(new LinearLayoutManager(getContext()));\r\n        cartAdapter = new CartAdapter(requireContext(),cartProducts);\r\n        rvCartProducts.setAdapter(cartAdapter);\r\n        cartAdapter.setCartProductClickListener(this);\r\n\r\n        calculateSubTotalUpdateUI();\r\n\r\n        defaultPreferences.registerOnSharedPreferenceChangeListener(this);\r\n    }\r\n\r\n    @Override\r\n    public void onPause() {\r\n        super.onPause();\r\n        defaultPreferences.unregisterOnSharedPreferenceChangeListener(this);\r\n    }\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (sharedPreferences.contains(\"cartProducts\")) {\r\n            defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n        }\r\n    }\r\n\r\n    private void initView(View view) {\r\n        llEmptyCart = view.findViewById(R.id.llEmptyCart_CartFragment);\r\n        llContentCart = view.findViewById(R.id.llContentCart_CartFragment);\r\n        rvCartProducts = view.findViewById(R.id.rvCartProducts_CartFragment);\r\n        tvSubTotalPrice = view.findViewById(R.id.tvSubTotalPrice_CartFragment);\r\n    }\r\n\r\n    @Override\r\n    public void onIncreaseProductQuantityClick(int position) {\r\n        cartProducts.get(position).plusQuantity();\r\n        cartAdapter.notifyDataSetChanged();\r\n        defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n        calculateSubTotalUpdateUI();\r\n    }\r\n\r\n    @Override\r\n    public void onDecreaseProductQuantityClick(int position) {\r\n        if (cartProducts.get(position).getQuantity() > 1)\r\n            cartProducts.get(position).minQuantity();\r\n        else\r\n            cartProducts.remove(position);\r\n        cartAdapter.notifyDataSetChanged();\r\n        defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n        calculateSubTotalUpdateUI();\r\n    }\r\n\r\n    @Override\r\n    public void onDeleteProductClick(int position) {\r\n        cartProducts.remove(position);\r\n        cartAdapter.notifyDataSetChanged();\r\n        defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n        calculateSubTotalUpdateUI();\r\n        BadgeDrawable cartBadge = ((HomeActivity) getActivity()).getBnvHomeNavigation().getOrCreateBadge(R.id.cart_navigation);\r\n        if (cartProducts.size() >= 1) {\r\n            cartBadge.setVisible(true);\r\n            cartBadge.setNumber(cartProducts.size());\r\n            cartBadge.setBackgroundColor(ContextCompat.getColor(getContext(), R.color.colorPrimary));\r\n        } else cartBadge.setVisible(false);\r\n    }\r\n\r\n    @Override\r\n    public void onProductClick(String productId) {\r\n        Intent intent=new Intent(getContext(), ProductDetailsActivity.class);\r\n        intent.putExtra(\"productId\",productId);\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void calculateSubTotalUpdateUI() {\r\n        double subTotal = 0;\r\n        for (CartItemQuantity cartItem : cartProducts) {\r\n            subTotal += cartItem.getQuantity() * cartItem.getProductPrice();\r\n        }\r\n        String subTotalPrice = NumberFormat.getInstance(new Locale(\"ar\")).format(subTotal) + getString(R.string.egp);\r\n        tvSubTotalPrice.setText(subTotalPrice);\r\n    }\r\n\r\n    private void displaySuitableLayout() {\r\n        if (cartProducts.size() == 0) {\r\n            llEmptyCart.setVisibility(View.VISIBLE);\r\n            llContentCart.setVisibility(View.GONE);\r\n        } else {\r\n            llEmptyCart.setVisibility(View.GONE);\r\n            llContentCart.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/mahitab/ecommerce/fragments/CartFragment.java	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/java/com/mahitab/ecommerce/fragments/CartFragment.java	(date 1604329002731)
@@ -1,9 +1,9 @@
 package com.mahitab.ecommerce.fragments;
 
-import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.net.Uri;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -24,11 +24,11 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import com.mahitab.ecommerce.R;
+import com.mahitab.ecommerce.activities.CartActivity;
 import com.mahitab.ecommerce.activities.HomeActivity;
 import com.mahitab.ecommerce.activities.PaymentWebViewActivity;
 import com.mahitab.ecommerce.activities.ProductDetailsActivity;
 import com.mahitab.ecommerce.adapters.CartAdapter;
-import com.mahitab.ecommerce.managers.DataManager;
 import com.mahitab.ecommerce.managers.GraphClientManager;
 import com.mahitab.ecommerce.models.CartItemQuantity;
 import com.shopify.buy3.GraphCall;
@@ -45,9 +45,9 @@
 import java.util.Locale;
 
 public class CartFragment extends Fragment implements CartAdapter.CartProductClickListener, SharedPreferences.OnSharedPreferenceChangeListener {
-
+    private static final String TAG = "CartFragment";
     private RecyclerView rvCartProducts;
-    private List<CartItemQuantity> cartProducts;
+    public static List<CartItemQuantity> cartProducts;
     private CartAdapter cartAdapter;
 
     private LinearLayout llEmptyCart;
@@ -56,7 +56,21 @@
     private TextView tvSubTotalPrice;
 
     private SharedPreferences defaultPreferences;
+    private Button checkoutButton;
 
+
+    String accessToken;
+    String firstName=" ";
+    String lastName="";
+    String phone="";
+    String city="";
+    String country="";
+    String zip="";
+    String province="";
+    String address1="";
+    String address2="";
+    String email="";
+    String strEmail,strPassword;
     public CartFragment() {
         // Required empty public constructor
     }
@@ -122,7 +136,365 @@
         llContentCart = view.findViewById(R.id.llContentCart_CartFragment);
         rvCartProducts = view.findViewById(R.id.rvCartProducts_CartFragment);
         tvSubTotalPrice = view.findViewById(R.id.tvSubTotalPrice_CartFragment);
-    }
+        checkoutButton = view.findViewById(R.id.checkoutButton);
+
+        createAccessToken();
+        checkoutButton.setOnClickListener(view1 -> {
+            ArrayList<Storefront.CheckoutLineItemInput> inputArrayList = new ArrayList<>();
+            for (int i = 0; i < cartProducts.size(); i++) {
+                inputArrayList.add(new Storefront.CheckoutLineItemInput(cartProducts.get(i).getQuantity(), cartProducts.get(i).getId()));
+                Log.e("Tango", cartProducts.get(i).getId().toString());
+            }
+            Storefront.CheckoutCreateInput input = new Storefront.CheckoutCreateInput()
+                    .setLineItemsInput(Input.value(inputArrayList));
+            createCashOnDeliveryCheckOut(input);
+        });
+    }
+
+
+    private void createAccessToken() {
+        getSavedEmailAndPassword();
+        Log.d(TAG, "createAccessToken :e "+strEmail);
+        Log.d(TAG, "createAccessToken:p "+strPassword);
+        Storefront.CustomerAccessTokenCreateInput tokenCreateInput = new Storefront.CustomerAccessTokenCreateInput(strEmail, strPassword);
+
+        Storefront.MutationQuery mutationQuery = Storefront.mutation(mutation -> mutation
+                .customerAccessTokenCreate(tokenCreateInput, query -> query
+                        .customerAccessToken(customerAccessToken -> customerAccessToken
+                                .accessToken()
+                                .expiresAt()
+
+                        )
+                        .userErrors(userError -> userError
+                                .field()
+                                .message()
+                        )
+                )
+        );
+        getAccessTokenFromAPI(mutationQuery);
+    }
+
+    private void getSavedEmailAndPassword() {
+        defaultPreferences =getActivity().getSharedPreferences(getContext().getPackageName(), Context.MODE_PRIVATE);
+        strEmail = defaultPreferences.getString("email", null);
+        strPassword= defaultPreferences.getString("password", null);
+    }
+
+    private void getAccessTokenFromAPI(Storefront.MutationQuery mutationQuery) {
+        GraphClientManager.mClient.mutateGraph(mutationQuery).enqueue(new GraphCall.Callback<Storefront.Mutation>() {
+            @Override
+            public void onResponse(@NonNull GraphResponse<Storefront.Mutation> response) {
+
+                if (!response.data().getCustomerAccessTokenCreate().getUserErrors().isEmpty()) {
+                    for (Storefront.UserError error : response.data().getCustomerAccessTokenCreate().getUserErrors()) {
+                        Log.e("TAG", "error is" + error.getMessage());
+                    }
+                } else {
+                    accessToken=response.data().getCustomerAccessTokenCreate().getCustomerAccessToken().getAccessToken();
+                    Log.e("TAG", "login" + response.data().getCustomerAccessTokenCreate().getCustomerAccessToken().getAccessToken());
+                    // queryUserDetails(accessToken);
+                    fetchCustomerQuery(accessToken);
+
+
+                }
+            }
+
+            @Override
+            public void onFailure(@NonNull GraphError error) {
+                Log.d("TAG","Create customer Account API FAIL:"+error.getMessage());
+            }
+        });
+    }
+
+    private void fetchCustomerQuery(String accessToken) {
+        Storefront.QueryRootQuery queryRootQuery = Storefront.query(rootQuery -> rootQuery
+                .customer(
+                        accessToken,
+                        userQuery -> userQuery
+                                .id()
+                                .firstName()
+                                .lastName()
+                                .email()
+                                .acceptsMarketing()
+                                .displayName()
+                                .phone()
+                                .defaultAddress(
+                                        address -> address
+                                                .firstName()
+                                                .lastName()
+                                                .address1()
+                                                .address2()
+                                                .phone()
+                                                .company()
+                                                .city()
+                                                .country()
+                                                .province()
+                                                .zip()
+                                )
+                                .addresses(
+                                        args -> args
+                                                .first(25),
+                                        address -> address
+                                                .edges(
+                                                        edge -> edge
+                                                                .node(
+                                                                        node -> node
+                                                                                .firstName()
+                                                                                .lastName()
+                                                                                .address1()
+                                                                                .address2()
+                                                                                .phone()
+                                                                                .company()
+                                                                                .city()
+                                                                                .country()
+                                                                                .province()
+                                                                                .zip()
+                                                                )
+                                                )
+                                )
+                )
+        );
+
+        getCustomerInformation(queryRootQuery);
+    }
+
+    private void getCustomerInformation(Storefront.QueryRootQuery queryRootQuery) {
+        GraphClientManager.mClient.queryGraph(queryRootQuery).enqueue(new GraphCall.Callback<Storefront.QueryRoot>() {
+            @Override
+            public void onResponse(@NonNull GraphResponse<Storefront.QueryRoot> response) {
+
+                if(response.data().getCustomer().getFirstName()!=null)
+                {
+                    firstName=response.data().getCustomer().getFirstName();
+                    Log.e("data", "user..." + response.data().getCustomer().getFirstName().toString());
+                }
+                if(response.data().getCustomer().getLastName()!=null)
+                {
+                    lastName=response.data().getCustomer().getLastName();
+                    Log.e("data", "user..." + response.data().getCustomer().getLastName().toString());
+                }
+                if(response.data().getCustomer().getEmail()!=null)
+                {
+                    email=response.data().getCustomer().getEmail();
+                    Log.e("data", "user..." + response.data().getCustomer().getEmail().toString());
+                }
+
+
+                if (response.data().getCustomer().getDefaultAddress().getPhone()!= null) {
+                    phone = response.data().getCustomer().getDefaultAddress().getPhone();
+                }
+
+                if (response.data().getCustomer().getDefaultAddress().getCity() != null) {
+                    city = response.data().getCustomer().getDefaultAddress().getCity();
+                }
+                if (response.data().getCustomer().getDefaultAddress().getCountry() != null) {
+                    country = response.data().getCustomer().getDefaultAddress().getCountry();
+                }
+                if (response.data().getCustomer().getDefaultAddress().getZip() != null) {
+                    zip = response.data().getCustomer().getDefaultAddress().getZip();
+                }
+                if (response.data().getCustomer().getDefaultAddress().getProvince() != null) {
+                    province = response.data().getCustomer().getDefaultAddress().getProvince();
+                }
+                if (response.data().getCustomer().getDefaultAddress().getAddress1() != null) {
+                    address1 = response.data().getCustomer().getDefaultAddress().getAddress1();
+                }
+                if (response.data().getCustomer().getDefaultAddress().getAddress2() != null) {
+                    address2 = response.data().getCustomer().getDefaultAddress().getAddress2();
+                }
+
+
+
+
+            }
+
+            @Override
+            public void onFailure(@NonNull GraphError error) {
+                Log.e("TAG", "Failed to execute query", error);
+            }
+        });
+    }
+
+    private void createCashOnDeliveryCheckOut(Storefront.CheckoutCreateInput input) {
+        Storefront.MutationQuery query = Storefront.mutation(mutationQuery -> mutationQuery
+                .checkoutCreate(input, createPayloadQuery -> createPayloadQuery
+                        .checkout(checkoutQuery -> checkoutQuery
+                                .webUrl()
+                        )
+                        .userErrors(userErrorQuery -> userErrorQuery
+                                .field()
+                                .message()
+                        ))
+        );
+
+        getCashPaymentStatus(query);
+    }
+
+    private void getCashPaymentStatus(Storefront.MutationQuery query) {
+
+        GraphClientManager.mClient.mutateGraph(query).enqueue(new GraphCall.Callback<Storefront.Mutation>() {
+            @Override
+            public void onResponse(@NonNull GraphResponse<Storefront.Mutation> response) {
+                if (!response.data().getCheckoutCreate().getUserErrors().isEmpty()) {
+                    // handle user friendly errors
+                } else {
+                    ID checkoutId = response.data().getCheckoutCreate().getCheckout().getId();
+                    Log.d(TAG, "ch id: "+checkoutId.toString());
+
+                    if (checkoutId.toString() != null) {
+                        queryUpdateEmail(checkoutId);
+                    }
+
+
+                }
+
+            }
+
+            @Override
+            public void onFailure(@NonNull GraphError error) {
+                // handle errors
+                // Log.d(TAG, "onFailure: " + error.getMessage().toString());
+            }
+        });
+    }
+
+    private void queryUpdateEmail(ID checkoutId) {
+        Storefront.MutationQuery mutationQuery = Storefront.mutation(mutation -> mutation
+                .checkoutEmailUpdate(checkoutId,
+                        email,
+                        result -> result
+                                .checkout(
+                                        checkout -> checkout
+                                                .webUrl()
+                                                .email()
+                                                .shippingAddress(
+                                                        address -> address
+                                                                .firstName()
+                                                                .lastName()
+                                                                .phone()
+                                                                .company()
+                                                                .address1()
+                                                                .address2()
+                                                                .city()
+                                                                .province()
+                                                                .country()
+                                                                .zip()
+                                                )
+                                                .createdAt()
+                                )
+                                .userErrors(
+                                        error -> error
+                                                .field()
+                                                .message()
+                                )
+                )
+        );
+        updateEmail(mutationQuery);
+    }
+
+    private void updateEmail(Storefront.MutationQuery mutationQuery) {
+        GraphClientManager.mClient.mutateGraph(mutationQuery).enqueue(new GraphCall.Callback<Storefront.Mutation>() {
+            @Override
+            public void onResponse(@NonNull GraphResponse<Storefront.Mutation> response) {
+
+                String strCheckoutId = response.data().getCheckoutEmailUpdate().getCheckout().getId().toString();
+                Log.d(TAG, "ch id email: "+strCheckoutId);
+
+                if (strCheckoutId != null) {
+
+                    ID checkoutId = new ID(strCheckoutId);
+                    Log.d(TAG, "itt: " + checkoutId);
+                    queryUpdateAddress(checkoutId);
+                }
+
+
+            }
+
+            @Override
+            public void onFailure(@NonNull GraphError error) {
+
+            }
+        });
+    }
+
+    private void queryUpdateAddress(ID checkoutId) {
+        Log.d(TAG, "firstName: " + firstName);
+        Storefront.MailingAddressInput inputAddress = new Storefront.MailingAddressInput()
+                .setFirstName(firstName)
+                .setLastName(lastName)
+                .setPhone(phone)
+                .setCity(city)
+                .setCountry(country)
+                .setZip(zip)
+                .setProvince(province)
+                .setAddress1(address1)
+                .setAddress2(address2);
+        Storefront.MutationQuery mutationQuery = Storefront.mutation(mutation -> mutation
+                .checkoutShippingAddressUpdate(
+                        inputAddress,
+                        checkoutId,
+                        result -> result
+                                .checkout(
+                                        checkout -> checkout
+                                                .email()
+                                                .webUrl()
+                                                .shippingAddress(
+                                                        address -> address
+                                                                .firstName()
+                                                                .lastName()
+                                                                .phone()
+                                                                .company()
+                                                                .address1()
+                                                                .address2()
+                                                                .city()
+                                                                .province()
+                                                                .country()
+                                                                .zip()
+                                                )
+                                )
+                                .userErrors(
+                                        error -> error
+                                                .field()
+                                                .message()
+                                )
+                )
+        );
+        updateAddress(mutationQuery);
+    }
+
+    private void updateAddress(Storefront.MutationQuery mutationQuery) {
+        GraphClientManager.mClient.mutateGraph(mutationQuery).enqueue(new GraphCall.Callback<Storefront.Mutation>() {
+            @Override
+            public void onResponse(@NonNull GraphResponse<Storefront.Mutation> response) {
+                String webUrl = response.data().getCheckoutShippingAddressUpdate().getCheckout().getWebUrl().toString();
+                Log.d(TAG, "web url: " + response.data().getCheckoutShippingAddressUpdate().getCheckout().getWebUrl().toString());
+                ID checkoutId=response.data().getCheckoutShippingAddressUpdate().getCheckout().getId();
+
+                Log.d(TAG, "id: "+checkoutId.toString());
+
+
+                Intent Getintent = new Intent(getContext(), PaymentWebViewActivity.class);
+                Getintent.putExtra("web_url", webUrl);
+                Bundle bundle = new Bundle();
+                bundle.putSerializable("checkout_id", (Serializable) checkoutId);
+                Getintent.putExtras(bundle);
+                startActivity(Getintent);
+
+                Log.d(TAG, "iddd: "+checkoutId.toString());
+
+
+
+            }
+
+            @Override
+            public void onFailure(@NonNull GraphError error) {
+
+            }
+        });
+    }
+
+
+
 
     @Override
     public void onIncreaseProductQuantityClick(int position) {
Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:attrs=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    android:id=\"@+id/home_content\"\r\n    tools:context=\".fragments.HomeFragment\">\r\n\r\n\r\n\r\n\r\n       <ImageView\r\n           android:layout_width=\"30dp\"\r\n           android:layout_height=\"30dp\"\r\n           android:id=\"@+id/icSearch\"\r\n           android:background=\"@drawable/ic_search_gray_24dp\"\r\n           android:layout_gravity=\"end\"\r\n                     />\r\n\r\n\r\n\r\n    <androidx.core.widget.NestedScrollView\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:fillViewport=\"true\"\r\n        android:overScrollMode=\"never\">\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:fitsSystemWindows=\"true\"\r\n            android:orientation=\"vertical\">\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:id=\"@+id/rvBanners\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_margin=\"8dp\"\r\n                android:minHeight=\"55dp\"\r\n                android:orientation=\"horizontal\"\r\n                app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\"\r\n                tools:listitem=\"@layout/banner_item\" />\r\n\r\n            <RelativeLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\">\r\n\r\n                <com.asksira.loopingviewpager.LoopingViewPager\r\n                    android:id=\"@+id/viewPager\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"148dp\"\r\n                    android:overScrollMode=\"never\"\r\n                    app:autoScroll=\"true\"\r\n                    app:scrollInterval=\"3000\"\r\n                    tools:layout_editor_absoluteX=\"-16dp\" />\r\n\r\n                <com.rd.PageIndicatorView\r\n                    android:id=\"@+id/pageIndicatorView\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_alignBottom=\"@id/viewPager\"\r\n                    android:layout_centerInParent=\"true\"\r\n                    android:layout_marginBottom=\"8dp\"\r\n                    android:paddingStart=\"8dp\"\r\n                    android:paddingTop=\"2dp\"\r\n                    android:paddingEnd=\"8dp\"\r\n                    android:paddingBottom=\"2dp\"\r\n                    app:layout_constraintBottom_toBottomOf=\"@+id/viewPager\"\r\n                    app:layout_constraintEnd_toEndOf=\"parent\"\r\n                    app:layout_constraintStart_toStartOf=\"@+id/viewPager\"\r\n                    app:piv_interactiveAnimation=\"true\"\r\n                    app:piv_selectedColor=\"@color/colorPrimary\"\r\n                    app:piv_unselectedColor=\"@color/colorAccent\"\r\n                    app:piv_viewPager=\"@id/viewPager\"\r\n                    attrs:piv_radius=\"3dp\" />\r\n\r\n            </RelativeLayout>\r\n\r\n            <androidx.recyclerview.widget.RecyclerView\r\n                android:id=\"@+id/rvCollectionProducts\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginStart=\"8dp\"\r\n                android:layout_marginTop=\"8dp\"\r\n                android:layout_marginEnd=\"8dp\"\r\n                android:overScrollMode=\"never\"\r\n                tools:listitem=\"@layout/collection_products_item\" />\r\n        </LinearLayout>\r\n    </androidx.core.widget.NestedScrollView>\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_home.xml	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/res/layout/fragment_home.xml	(date 1604332133100)
@@ -10,16 +10,40 @@
     tools:context=".fragments.HomeFragment">
 
 
-
-
-       <ImageView
-           android:layout_width="30dp"
-           android:layout_height="30dp"
-           android:id="@+id/icSearch"
-           android:background="@drawable/ic_search_gray_24dp"
-           android:layout_gravity="end"
-                     />
-
+<com.google.android.material.appbar.AppBarLayout
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:theme="@style/AppTheme.AppBarOverlay"
+    app:layout_constraintEnd_toEndOf="parent"
+    app:layout_constraintStart_toStartOf="parent"
+    app:layout_constraintTop_toTopOf="parent"
+    android:background="@android:color/white">
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="50dp">
+    <ImageView
+        android:layout_width="27dp"
+        android:layout_height="27dp"
+        android:id="@+id/icSearch"
+        android:background="@drawable/ic_search_gray_24dp"
+       android:layout_alignParentEnd="true"
+        android:layout_centerVertical="true"
+        android:layout_marginEnd="8dp"
+
+        />
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentStart="true"
+        android:text="@string/home"
+        android:textColor="#000"
+        android:textSize="17sp"
+        android:textStyle="bold"
+        android:layout_centerVertical="true"
+        android:layout_marginStart="8dp"
+        />
+    </RelativeLayout>
+</com.google.android.material.appbar.AppBarLayout>
 
 
     <androidx.core.widget.NestedScrollView
Index: app/src/main/java/com/mahitab/ecommerce/activities/HomeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mahitab.ecommerce.activities;\r\n\r\nimport android.animation.Animator;\r\nimport android.animation.AnimatorListenerAdapter;\r\nimport android.content.Context;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.content.ContextCompat;\r\nimport androidx.fragment.app.Fragment;\r\nimport androidx.fragment.app.FragmentManager;\r\nimport androidx.fragment.app.FragmentTransaction;\r\n\r\nimport com.google.android.material.badge.BadgeDrawable;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.mahitab.ecommerce.R;\r\nimport com.mahitab.ecommerce.fragments.AccountFragment;\r\nimport com.mahitab.ecommerce.fragments.CartFragment;\r\nimport com.mahitab.ecommerce.fragments.CategoriesFragment;\r\nimport com.mahitab.ecommerce.fragments.HomeFragment;\r\nimport com.mahitab.ecommerce.managers.DataManager;\r\nimport com.mahitab.ecommerce.managers.interfaces.BaseCallback;\r\nimport com.mahitab.ecommerce.models.CartItemQuantity;\r\nimport com.mahitab.ecommerce.models.CollectionModel;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static com.mahitab.ecommerce.utils.CommonUtils.setArDefaultLocale;\r\n\r\npublic class HomeActivity extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener {\r\n\r\n    private boolean doubleBackToExitPressedOnce = false;\r\n    private BottomNavigationView bnvHomeNavigation;\r\n    private SharedPreferences defaultPreferences;\r\n\r\n    private LinearLayout llHome;\r\n    private LinearLayout llSplash;\r\n\r\n    private List<CollectionModel> collections;\r\n    private static CollectionLoadListener collectionLoadListener;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n//        setArDefaultLocale(this);\r\n        setContentView(R.layout.activity_home);\r\n\r\n        initView();\r\n\r\n        defaultPreferences = getSharedPreferences(getPackageName(), Context.MODE_PRIVATE);\r\n\r\n        //loading the home default fragment\r\n        changeFragment(new HomeFragment(), HomeFragment.class.getName(),\r\n                bnvHomeNavigation.getMenu().getItem(0));\r\n\r\n        bnvHomeNavigation.setOnNavigationItemSelectedListener(this);\r\n\r\n        DataManager.getInstance().setClientManager(this); // init shopify sdk\r\n\r\n        geCollectionsWithSomeProducts();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n        List<CartItemQuantity> cartProducts;\r\n        if (defaultPreferences.getString(\"cartProducts\", null) == null)\r\n            cartProducts = new ArrayList<>();\r\n        else\r\n            cartProducts = new Gson().fromJson(defaultPreferences.getString(\"cartProducts\", null), new TypeToken<List<CartItemQuantity>>() {\r\n            }.getType());\r\n\r\n        // change the number to see cartBadge in action\r\n        int cartProductsCount = 0;\r\n        if (cartProducts != null) {\r\n            cartProductsCount = cartProducts.size();\r\n        }\r\n\r\n        BadgeDrawable cartBadge = bnvHomeNavigation.getOrCreateBadge(R.id.cart_navigation);\r\n        if (cartProductsCount >= 1) {\r\n            cartBadge.setVisible(true);\r\n            cartBadge.setNumber(cartProductsCount);\r\n            cartBadge.setBackgroundColor(ContextCompat.getColor(this, R.color.colorPrimary));\r\n        } else cartBadge.setVisible(false);\r\n\r\n        overridePendingTransition(0, 0); // remove activity default transition\r\n    }\r\n\r\n    @Override\r\n    public void onBackPressed() {\r\n        if (bnvHomeNavigation.getSelectedItemId() != R.id.home_navigation)\r\n            changeFragment(new HomeFragment(), HomeFragment.class\r\n                    .getSimpleName(), bnvHomeNavigation.getMenu().getItem(0));\r\n        else {\r\n            if (doubleBackToExitPressedOnce) {\r\n                super.onBackPressed();\r\n            }\r\n            doubleBackToExitPressedOnce = true;\r\n            Toast.makeText(this, getString(R.string.back_again), Toast.LENGTH_SHORT).show();\r\n            new Handler().postDelayed(() -> doubleBackToExitPressedOnce = false, 2000);\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n        if (item.getItemId() == R.id.home_navigation)\r\n            changeFragment(new HomeFragment(), HomeFragment.class.getName(), item);\r\n        else if (item.getItemId() == R.id.categories_navigation)\r\n            changeFragment(new CategoriesFragment(), CategoriesFragment.class.getName(), item);\r\n        else if (item.getItemId() == R.id.cart_navigation)\r\n            changeFragment(new CartFragment(), CartFragment.class.getName(), item);\r\n        else if (item.getItemId() == R.id.account_navigation)\r\n            changeFragment(new AccountFragment(), AccountFragment.class.getName(), item);\r\n        return true;\r\n    }\r\n\r\n    private void initView() {\r\n        llHome = findViewById(R.id.llHome_HomeActivity);\r\n        llSplash = findViewById(R.id.llSplash_HomeActivity);\r\n        bnvHomeNavigation = findViewById(R.id.bnvHomeNavigation_HomeActivity);\r\n    }\r\n\r\n    private void changeFragment(Fragment fragment, String tagFragmentName, MenuItem item) {\r\n\r\n        FragmentManager mFragmentManager = getSupportFragmentManager();\r\n        FragmentTransaction fragmentTransaction = mFragmentManager.beginTransaction();\r\n\r\n        Fragment currentFragment = mFragmentManager.getPrimaryNavigationFragment();\r\n        if (currentFragment != null) {\r\n            fragmentTransaction.hide(currentFragment);\r\n        }\r\n\r\n        Fragment fragmentTemp = mFragmentManager.findFragmentByTag(tagFragmentName);\r\n        if (fragmentTemp == null) {\r\n            fragmentTemp = fragment;\r\n            fragmentTransaction.add(R.id.llContainer_HomeActivity, fragmentTemp, tagFragmentName);\r\n        } else {\r\n            fragmentTransaction.show(fragmentTemp);\r\n        }\r\n\r\n        item.setChecked(true);\r\n\r\n        fragmentTransaction.setPrimaryNavigationFragment(fragmentTemp);\r\n        fragmentTransaction.setReorderingAllowed(true);\r\n        fragmentTransaction.commitNowAllowingStateLoss();\r\n    }\r\n\r\n    public BottomNavigationView getBnvHomeNavigation() {\r\n        return bnvHomeNavigation;\r\n    }\r\n\r\n    private void geCollectionsWithSomeProducts() {\r\n        DataManager.getInstance().collections(new BaseCallback() {\r\n            @Override\r\n            public void onResponse(int status) {\r\n                if (status == 200) {\r\n                    runOnUiThread(() -> {\r\n                        collections = DataManager.getInstance().getCollections();\r\n                        collections.removeIf(collection -> (collection.getPreviewProducts().size() == 0)); //remove collection if has no products\r\n                        if (collectionLoadListener != null)\r\n                            collectionLoadListener.onCollectionLoaded(collections);\r\n                        llSplash.animate()\r\n                                .translationY(llSplash.getHeight())\r\n                                .alpha(0.0f)\r\n                                .setDuration(300)\r\n                                .setListener(new AnimatorListenerAdapter() {\r\n                                    @Override\r\n                                    public void onAnimationEnd(Animator animation) {\r\n                                        super.onAnimationEnd(animation);\r\n                                        llSplash.setVisibility(View.GONE);\r\n                                        llHome.setVisibility(View.VISIBLE);\r\n                                    }\r\n                                });\r\n                    });\r\n                } else {\r\n                    this.onFailure(\"An unknown error has occurred\");\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailure(String message) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    public interface CollectionLoadListener {\r\n        void onCollectionLoaded(List<CollectionModel> collections);\r\n    }\r\n\r\n    public static void setCollectionLoadListener(CollectionLoadListener collectionLoadListener) {\r\n        HomeActivity.collectionLoadListener = collectionLoadListener;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/mahitab/ecommerce/activities/HomeActivity.java	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/java/com/mahitab/ecommerce/activities/HomeActivity.java	(date 1604330695844)
@@ -3,9 +3,11 @@
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.content.Context;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.os.Handler;
+import android.util.Log;
 import android.view.MenuItem;
 import android.view.View;
 import android.widget.LinearLayout;
@@ -39,6 +41,7 @@
 
 public class HomeActivity extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener {
 
+    private static final String TAG ="HomeActivity" ;
     private boolean doubleBackToExitPressedOnce = false;
     private BottomNavigationView bnvHomeNavigation;
     private SharedPreferences defaultPreferences;
@@ -48,7 +51,8 @@
 
     private List<CollectionModel> collections;
     private static CollectionLoadListener collectionLoadListener;
-
+ String sign;
+    List<CartItemQuantity> cartProducts=null;
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -56,7 +60,7 @@
         setContentView(R.layout.activity_home);
 
         initView();
-
+cartProducts=new ArrayList<>();
         defaultPreferences = getSharedPreferences(getPackageName(), Context.MODE_PRIVATE);
 
         //loading the home default fragment
@@ -74,13 +78,16 @@
     protected void onResume() {
         super.onResume();
 
-        List<CartItemQuantity> cartProducts;
+
         if (defaultPreferences.getString("cartProducts", null) == null)
             cartProducts = new ArrayList<>();
+
+
         else
             cartProducts = new Gson().fromJson(defaultPreferences.getString("cartProducts", null), new TypeToken<List<CartItemQuantity>>() {
             }.getType());
 
+
         // change the number to see cartBadge in action
         int cartProductsCount = 0;
         if (cartProducts != null) {
@@ -94,7 +101,24 @@
             cartBadge.setBackgroundColor(ContextCompat.getColor(this, R.color.colorPrimary));
         } else cartBadge.setVisible(false);
 
-        overridePendingTransition(0, 0); // remove activity default transition
+        overridePendingTransition(0, 0);
+    }
+
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        Intent intent = getIntent();
+        sign = intent.getStringExtra("from_payment");
+        Log.d(TAG, "getSignAfterPayment1: " + sign);
+        cartProducts = new Gson().fromJson(defaultPreferences.getString("cartProducts", null), new TypeToken<List<CartItemQuantity>>() {
+        }.getType());
+        Log.d(TAG, "onPause: "+cartProducts);
+
+        if (sign != null) {
+            cartProducts.clear();
+            defaultPreferences.edit().putString("cartProducts", new Gson().toJson(cartProducts)).apply();
+        }
     }
 
     @Override
Index: app/src/main/java/com/mahitab/ecommerce/adapters/CartAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mahitab.ecommerce.adapters;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.graphics.Paint;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.bumptech.glide.Glide;\r\nimport com.bumptech.glide.load.engine.DiskCacheStrategy;\r\nimport com.bumptech.glide.request.RequestOptions;\r\nimport com.mahitab.ecommerce.R;\r\nimport com.mahitab.ecommerce.activities.ProductDetailsActivity;\r\nimport com.mahitab.ecommerce.managers.DataManager;\r\nimport com.mahitab.ecommerce.managers.interfaces.NavigationInterface;\r\nimport com.mahitab.ecommerce.models.CartItemQuantity;\r\nimport com.mahitab.ecommerce.models.ProductModel;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class CartAdapter extends RecyclerView.Adapter<CartAdapter.CartViewHolder>{\r\n\r\n    private List<CartItemQuantity> cartItemQuantities;\r\n\r\n    private CartProductClickListener listener;\r\n    Context context;\r\n    public CartAdapter(Context context,List<CartItemQuantity> cartItemQuantities) {\r\n        this.context=context;\r\n        this.cartItemQuantities = cartItemQuantities;\r\n    }\r\n\r\n    @NonNull\r\n    @Override\r\n    public CartViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\r\n        return new CartViewHolder(LayoutInflater.from(parent.getContext()).inflate(R.layout.cart_item, parent, false));\r\n    }\r\n\r\n    @Override\r\n    public void onBindViewHolder(@NonNull CartViewHolder holder, int position) {\r\n        ProductModel product = DataManager.getInstance().getProductByID(cartItemQuantities.get(position).getId().toString());\r\n        Glide.with(holder.itemView.getContext())\r\n                .load(product.getImages()[0])\r\n                .thumbnail(/*sizeMultiplier*/ 0.25f)\r\n                .apply(new RequestOptions())\r\n                .placeholder(R.drawable.ic_image_gray_24dp)\r\n                .fallback(R.drawable.ic_image_gray_24dp)\r\n                .dontTransform()\r\n                .diskCacheStrategy(DiskCacheStrategy.ALL)\r\n                .into(holder.ivProductImage);\r\n\r\n        holder.tvProductTitle.setText(product.getTitle());\r\n\r\n        String price;\r\n        String oldPrice;\r\n        if (product.getVariants() != null) {\r\n            if (product.getVariants().get(0).getOldPrice() != null &&\r\n                    product.getVariants().get(0).getOldPrice().compareTo(product.getVariants().get(0).getPrice()) > 0 &&\r\n                    product.getVariants().get(0).isAvailableForSale()) {\r\n//                oldPrice = NumberFormat.getInstance(new Locale(\"ar\")).format(product.getVariants().get(0).getOldPrice()) + holder.itemView.getContext().getResources().getString(R.string.egp);\r\n//                holder.tvOldPrice.setText(oldPrice);\r\n                holder.tvOldPrice.setText(product.getVariants().get(0).getOldPrice()+\"\");\r\n                holder.tvOldPrice.setPaintFlags(holder.tvOldPrice.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);\r\n\r\n                price = NumberFormat.getInstance(new Locale(\"ar\")).format(product.getVariants().get(0).getPrice()) + holder.itemView.getContext().getResources().getString(R.string.egp);\r\n                holder.tvPrice.setVisibility(View.VISIBLE);\r\n                holder.tvPrice.setText(price);\r\n            } else {\r\n                holder.tvPrice.setVisibility(View.INVISIBLE);\r\n                holder.tvOldPrice.setVisibility(View.VISIBLE);\r\n//                price = NumberFormat.getInstance(new Locale(\"ar\")).format(product.getVariants().get(0).getPrice()) + holder.itemView.getContext().getResources().getString(R.string.egp);\r\n//                holder.tvOldPrice.setText(price);\r\n                holder.tvOldPrice.setText(product.getVariants().get(0).getPrice()+\"\");\r\n            }\r\n        }\r\n\r\n\r\n        holder.tvQuantity.setText(String.valueOf(cartItemQuantities.get(position).getQuantity()));\r\n        holder.itemView.setOnClickListener(v -> listener.onProductClick(cartItemQuantities.get(position).getId().toString()));\r\n    }\r\n\r\n    @Override\r\n    public int getItemCount() {\r\n        return cartItemQuantities.size();\r\n    }\r\n\r\n    public class CartViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {\r\n        private final ImageView ivProductImage;\r\n        private final TextView tvProductTitle;\r\n        private final TextView tvPrice;\r\n        private final TextView tvOldPrice;\r\n        private final TextView tvQuantityType;\r\n        private final TextView tvQuantity;\r\n\r\n        public CartViewHolder(@NonNull View itemView) {\r\n            super(itemView);\r\n            ivProductImage = itemView.findViewById(R.id.ivProductImage_CartItem);\r\n            tvProductTitle = itemView.findViewById(R.id.tvProductTitle_CartItem);\r\n            ImageView ivDelete = itemView.findViewById(R.id.ivDelete_CartItem);\r\n            tvPrice = itemView.findViewById(R.id.tvPrice_CartItem);\r\n            tvOldPrice = itemView.findViewById(R.id.tvOldPrice_CartItem);\r\n            tvQuantityType = itemView.findViewById(R.id.tvQuantityType_CartItem);\r\n            ImageView ivIncreaseQuantity = itemView.findViewById(R.id.ivIncreaseQuantity_CartItem);\r\n            tvQuantity = itemView.findViewById(R.id.tvQuantity_CartItem);\r\n            ImageView ivDecreaseQuantity = itemView.findViewById(R.id.ivDecreaseQuantity_CartItem);\r\n\r\n            ivDelete.setOnClickListener(this);\r\n            ivIncreaseQuantity.setOnClickListener(this);\r\n            ivDecreaseQuantity.setOnClickListener(this);\r\n            itemView.setOnClickListener(new View.OnClickListener() {\r\n                @Override\r\n                public void onClick(View v) {\r\n                    if (listener != null && getAdapterPosition() != RecyclerView.NO_POSITION)\r\n                        listener.onProductClick(cartItemQuantities.get(getAdapterPosition()).getId().toString());\r\n                }\r\n            });\r\n        }\r\n\r\n        @Override\r\n        public void onClick(View v) {\r\n            if (v.getId() == R.id.ivDelete_CartItem) {\r\n                if (listener != null && getAdapterPosition() != RecyclerView.NO_POSITION)\r\n                    listener.onDeleteProductClick(getAdapterPosition());\r\n            } else if (v.getId() == R.id.ivIncreaseQuantity_CartItem) {\r\n                if (listener != null && getAdapterPosition() != RecyclerView.NO_POSITION)\r\n                    listener.onIncreaseProductQuantityClick(getAdapterPosition());\r\n            } else if (v.getId() == R.id.ivDecreaseQuantity_CartItem) {\r\n                if (listener != null && getAdapterPosition() != RecyclerView.NO_POSITION)\r\n                    listener.onDecreaseProductQuantityClick(getAdapterPosition());\r\n            }\r\n        }\r\n    }\r\n\r\n    public interface CartProductClickListener {\r\n        void onIncreaseProductQuantityClick(int position);\r\n\r\n        void onDecreaseProductQuantityClick(int position);\r\n\r\n        void onDeleteProductClick(int position);\r\n\r\n        void onProductClick(String productId);\r\n    }\r\n\r\n    public void setCartProductClickListener(CartProductClickListener listener) {\r\n        this.listener = listener;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/mahitab/ecommerce/adapters/CartAdapter.java	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/java/com/mahitab/ecommerce/adapters/CartAdapter.java	(date 1604322039541)
@@ -46,7 +46,7 @@
 
     @Override
     public void onBindViewHolder(@NonNull CartViewHolder holder, int position) {
-        ProductModel product = DataManager.getInstance().getProductByID(cartItemQuantities.get(position).getId().toString());
+        ProductModel product = DataManager.getInstance().getProductByID(cartItemQuantities.get(position).getProductID().toString());
         Glide.with(holder.itemView.getContext())
                 .load(product.getImages()[0])
                 .thumbnail(/*sizeMultiplier*/ 0.25f)
Index: app/src/main/java/com/mahitab/ecommerce/activities/ProductDetailsActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mahitab.ecommerce.activities;\r\n\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.net.Uri;\r\nimport android.os.Bundle;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.text.HtmlCompat;\r\nimport androidx.recyclerview.widget.GridLayoutManager;\r\nimport androidx.recyclerview.widget.RecyclerView;\r\n\r\nimport com.asksira.loopingviewpager.LoopingViewPager;\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.reflect.TypeToken;\r\nimport com.mahitab.ecommerce.R;\r\nimport com.mahitab.ecommerce.adapters.ProductAdapter;\r\nimport com.mahitab.ecommerce.adapters.ProductImageSliderAdapter;\r\nimport com.mahitab.ecommerce.managers.DataManager;\r\nimport com.mahitab.ecommerce.models.CartItemQuantity;\r\nimport com.mahitab.ecommerce.models.CollectionModel;\r\nimport com.mahitab.ecommerce.models.ProductModel;\r\nimport com.rd.PageIndicatorView;\r\n\r\nimport java.text.NumberFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\nimport java.util.stream.IntStream;\r\n\r\nimport static com.mahitab.ecommerce.utils.CommonUtils.setArDefaultLocale;\r\n\r\npublic class ProductDetailsActivity extends AppCompatActivity implements SharedPreferences.OnSharedPreferenceChangeListener {\r\n\r\n    // badge text view\r\n    TextView badgeCounter;\r\n    // change the number to see badge in action\r\n    int cartProductsCount = 0;\r\n\r\n    private LoopingViewPager viewPager;\r\n    private PageIndicatorView indicatorView;\r\n\r\n    private TextView tvTitle;\r\n    private TextView tvPrice;\r\n    private TextView tvDescription;\r\n    private ImageView ivDescription;\r\n\r\n    private ImageView ivWishProduct;\r\n    private List<String> wishListProducts;\r\n    private boolean isWishedBefore;\r\n\r\n    private List<CartItemQuantity> cartProducts;\r\n    private LinearLayout llCartQuantityControl;\r\n    private Button btnAddToCart;\r\n\r\n    private TextView tvQuantityType;\r\n    private ImageView ivIncreaseQuantity;\r\n    private TextView tvCartQuantity;\r\n    private ImageView ivDecreaseQuantity;\r\n    private ImageView ivBuyByPhone;\r\n    private Button btnBuy;\r\n\r\n    private MenuItem cartMenuItem;\r\n\r\n    private String currentProductId;\r\n\r\n    private ProductModel product;\r\n    private RecyclerView rvRelatedProducts;\r\n    private SharedPreferences defaultPreferences;\r\n    private TextView tvSKU;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setArDefaultLocale(this);\r\n        setContentView(R.layout.activity_product_details);\r\n        Toolbar toolbar = findViewById(R.id.toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        initView();\r\n\r\n        defaultPreferences = getSharedPreferences(getPackageName(), Context.MODE_PRIVATE);\r\n\r\n        if (defaultPreferences.getString(\"cartProducts\", null) == null)\r\n            cartProducts = new ArrayList<>();\r\n        else\r\n            cartProducts = new Gson().fromJson(defaultPreferences.getString(\"cartProducts\", null), new TypeToken<List<CartItemQuantity>>() {\r\n            }.getType());\r\n\r\n        if (defaultPreferences.getString(\"wishListProducts\", null) == null)\r\n            wishListProducts = new ArrayList<>();\r\n        else\r\n            wishListProducts = new Gson().fromJson(defaultPreferences.getString(\"wishListProducts\", null), new TypeToken<List<String>>() {\r\n            }.getType());\r\n\r\n        cartProductsCount = cartProducts.size();\r\n\r\n        if (getIntent().getExtras() != null) {\r\n            currentProductId = getIntent().getExtras().getString(\"productId\");\r\n            boolean isAddedBefore = cartProducts.stream()\r\n                    .anyMatch(cartItemQuantity -> cartItemQuantity.getId().toString().equals(currentProductId));\r\n\r\n            displayQuantityControls(isAddedBefore);\r\n\r\n            isWishedBefore = wishListProducts.stream()\r\n                    .anyMatch(wishedProduct -> wishedProduct.equals(currentProductId));\r\n\r\n            displayIsWishedProduct(isWishedBefore);\r\n\r\n            product = DataManager.getInstance().getProductByID(currentProductId);\r\n\r\n        }else\r\n        {\r\n            currentProductId= getIntent().getStringExtra(\"productId\");\r\n            product = DataManager.getInstance().getProductByID(currentProductId);\r\n        }\r\n\r\n        if (product != null) {\r\n            tvTitle.setText(product.getTitle());\r\n            tvSKU.setText(product.getSKU());\r\n            String price = NumberFormat.getInstance(new Locale(\"ar\")).format(product.getVariants().get(0).getPrice()) + getString(R.string.egp);\r\n            tvPrice.setText(price);\r\n\r\n            tvDescription.setText(HtmlCompat.fromHtml(product.getDescription(), HtmlCompat.FROM_HTML_MODE_LEGACY));\r\n\r\n            if (getSupportActionBar() != null) {\r\n                getSupportActionBar().setTitle(product.getTitle());\r\n                getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n            }\r\n\r\n            if (product.getImages() != null) {\r\n                ProductImageSliderAdapter sliderAdapter = new ProductImageSliderAdapter(this, Arrays.asList(product.getImages()), true);\r\n                viewPager.setAdapter(sliderAdapter);\r\n                //Tell the IndicatorView that how many indicators should it display:\r\n                indicatorView.setCount(viewPager.getIndicatorCount());\r\n            }\r\n\r\n            //Set IndicatorPageChangeListener on LoopingViewPager.\r\n            //When the methods are called, update the Indicator accordingly.\r\n            viewPager.setIndicatorPageChangeListener(new LoopingViewPager.IndicatorPageChangeListener() {\r\n                @Override\r\n                public void onIndicatorProgress(int selectingPosition, float progress) {\r\n                }\r\n\r\n                @Override\r\n                public void onIndicatorPageChange(int newIndicatorPosition) {\r\n                    indicatorView.setSelection(newIndicatorPosition);\r\n                }\r\n            });\r\n\r\n            CollectionModel collection = DataManager.getInstance().getCollectionByID(product.getCollectionID());\r\n            if (collection != null) {\r\n                rvRelatedProducts.setHasFixedSize(true);\r\n                rvRelatedProducts.setLayoutManager(new GridLayoutManager(this, 3));\r\n                ProductAdapter productAdapter = new ProductAdapter(this,collection.getPreviewProducts());\r\n                rvRelatedProducts.setAdapter(productAdapter);\r\n            }\r\n        }\r\n\r\n        ivDescription.setOnClickListener(v -> {\r\n            Intent intent = new Intent(getApplicationContext(), DescriptionActivity.class);\r\n            intent.putExtra(\"description\", product.getDescription());\r\n            startActivity(intent);\r\n        });\r\n\r\n        btnAddToCart.setOnClickListener(v -> {\r\n            cartProducts.add(new CartItemQuantity(1, product.getID(), product.getVariants().get(0).getPrice().doubleValue()));\r\n            defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n            tvCartQuantity.setText(String.valueOf(1));\r\n            cartProductsCount = cartProducts.size();\r\n            updateCartBadge(cartProductsCount); //update badge counter\r\n            displayQuantityControls(true);\r\n        });\r\n\r\n        ivBuyByPhone.setOnClickListener(v -> {\r\n            Intent intent = new Intent(Intent.ACTION_DIAL);\r\n            intent.setData(Uri.parse(\"tel:+20 111 111 4512\"));\r\n            startActivity(intent);\r\n        });\r\n\r\n        ivIncreaseQuantity.setOnClickListener(v -> {\r\n            int currentCartProductIndex = IntStream.range(0, cartProducts.size())\r\n                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))\r\n                    .findFirst().orElse(-1);\r\n            cartProducts.get(currentCartProductIndex).plusQuantity();\r\n            updateQuantitySharedPreferencesUI(currentCartProductIndex);\r\n        });\r\n\r\n        ivDecreaseQuantity.setOnClickListener(v -> {\r\n            int currentCartProductIndex = IntStream.range(0, cartProducts.size())\r\n                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))\r\n                    .findFirst().orElse(-1);\r\n            if (cartProducts.get(currentCartProductIndex).getQuantity() > 1) {\r\n                cartProducts.get(currentCartProductIndex).minQuantity();\r\n                updateQuantitySharedPreferencesUI(currentCartProductIndex);\r\n            } else {\r\n                cartProducts.remove(currentCartProductIndex);\r\n                defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply(); //update shared pref list after remove\r\n                llCartQuantityControl.setVisibility(View.GONE);\r\n                btnAddToCart.setVisibility(View.VISIBLE);\r\n                cartProductsCount = cartProducts.size();\r\n                updateCartBadge(cartProductsCount);\r\n            }\r\n        });\r\n\r\n        btnBuy.setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), CartActivity.class)));\r\n\r\n        ivWishProduct.setOnClickListener(v -> {\r\n            if (isWishedBefore) {\r\n                isWishedBefore = false;\r\n                wishListProducts.remove(currentProductId);\r\n            } else {\r\n                isWishedBefore = true;\r\n                wishListProducts.add(currentProductId);\r\n            }\r\n            defaultPreferences.edit().putString(\"wishListProducts\", new Gson().toJson(wishListProducts)).apply();\r\n            displayIsWishedProduct(isWishedBefore);\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        overridePendingTransition(0, 0); // remove activity default transition\r\n\r\n        if (llCartQuantityControl.getVisibility() == View.VISIBLE) {\r\n            //start update quantity in ui in changed in cart fragment and back to details\r\n            cartProducts = new Gson().fromJson(defaultPreferences.getString(\"cartProducts\", null), new TypeToken<List<CartItemQuantity>>() {\r\n            }.getType());\r\n            int currentCartProductIndex = IntStream.range(0, cartProducts.size())\r\n                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))\r\n                    .findFirst().orElse(-1);\r\n            if (currentCartProductIndex != -1)\r\n                updateQuantitySharedPreferencesUI(currentCartProductIndex);\r\n            else\r\n                displayQuantityControls(false);\r\n            //end update quantity in ui\r\n        }\r\n\r\n        defaultPreferences.registerOnSharedPreferenceChangeListener(this);\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        defaultPreferences.unregisterOnSharedPreferenceChangeListener(this);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.product_details_menu, menu);\r\n        cartMenuItem = menu.findItem(R.id.action_open_cart);\r\n        updateCartBadge(cartProductsCount);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if (item.getItemId() == android.R.id.home)\r\n            onBackPressed();\r\n        else if (item.getItemId() == R.id.action_open_cart)\r\n            startActivity(new Intent(getApplicationContext(), CartActivity.class));\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    @Override\r\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\r\n        if (sharedPreferences.contains(\"cartProducts\")) {\r\n            defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply();\r\n        }\r\n    }\r\n\r\n    private void initView() {\r\n        viewPager = findViewById(R.id.viewPager);\r\n        indicatorView = findViewById(R.id.pageIndicatorView);\r\n        tvTitle = findViewById(R.id.tvTitle_ProductDetailsActivity);\r\n        tvPrice = findViewById(R.id.tvPrice_ProductDetailsActivity);\r\n        tvDescription = findViewById(R.id.tvDescription_ProductDetailsActivity);\r\n        ivDescription = findViewById(R.id.ivDescription_ProductDetailsActivity);\r\n        rvRelatedProducts = findViewById(R.id.rvRelatedProducts_ProductDetailsActivity);\r\n        llCartQuantityControl = findViewById(R.id.llCartQuantityControl_ProductDetailsActivity);\r\n        btnAddToCart = findViewById(R.id.btnAddToCart_ProductDetailsActivity);\r\n        ivBuyByPhone = findViewById(R.id.ivBuyByPhone_ProductDetailsActivity);\r\n        tvQuantityType = findViewById(R.id.tvQuantityType_ProductDetailsActivity);\r\n        tvCartQuantity = findViewById(R.id.tvCartQuantity_ProductDetailsActivity);\r\n        ivIncreaseQuantity = findViewById(R.id.ivIncreaseQuantity_ProductDetailsActivity);\r\n        ivDecreaseQuantity = findViewById(R.id.ivDecreaseQuantity_ProductDetailsActivity);\r\n        btnBuy = findViewById(R.id.btnBuy_ProductDetailsActivity);\r\n        ivWishProduct = findViewById(R.id.ivWishProduct_ProductDetailsActivity);\r\n        tvSKU=findViewById(R.id.tvSKU_ProductDetailsActivity);\r\n    }\r\n\r\n    private void displayQuantityControls(boolean isAddedToCart) {\r\n        if (isAddedToCart) {\r\n            int currentCartProductIndex = IntStream.range(0, cartProducts.size())\r\n                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))\r\n                    .findFirst().orElse(-1);\r\n            tvCartQuantity.setText(String.valueOf(cartProducts.get(currentCartProductIndex).getQuantity())); //update cart quantity in ui\r\n            llCartQuantityControl.setVisibility(View.VISIBLE);\r\n            btnAddToCart.setVisibility(View.GONE);\r\n        } else {\r\n            llCartQuantityControl.setVisibility(View.GONE);\r\n            btnAddToCart.setVisibility(View.VISIBLE);\r\n        }\r\n    }\r\n\r\n    private void displayIsWishedProduct(boolean wished) {\r\n        if (wished)\r\n            ivWishProduct.setImageResource(R.drawable.ic_favorite_yellow_24dp);\r\n        else ivWishProduct.setImageResource(R.drawable.ic_favorite_border_yellow_24dp);\r\n    }\r\n\r\n    private void updateQuantitySharedPreferencesUI(int cartProductIndex) {\r\n        defaultPreferences.edit().putString(\"cartProducts\", new Gson().toJson(cartProducts)).apply(); // update list in shared pref\r\n        tvCartQuantity.setText(String.valueOf(cartProducts.get(cartProductIndex).getQuantity())); //update cart quantity in ui\r\n    }\r\n\r\n    private void updateCartBadge(int cartProductsCount) {\r\n        if (cartProductsCount == 0)\r\n            cartMenuItem.setActionView(null);\r\n        else {\r\n            // if notification than set the badge icon layout\r\n            cartMenuItem.setActionView(R.layout.cart_badge_layout);\r\n            // get the text view of the action view for the nav item\r\n            badgeCounter = cartMenuItem.getActionView().findViewById(R.id.badge_counter);\r\n            // set the pending notifications value\r\n            badgeCounter.setText(String.valueOf(cartProductsCount));\r\n            cartMenuItem.getActionView().setOnClickListener(v -> startActivity(new Intent(getApplicationContext(), CartActivity.class))); // handel custom view click\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/mahitab/ecommerce/activities/ProductDetailsActivity.java	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/java/com/mahitab/ecommerce/activities/ProductDetailsActivity.java	(date 1604321990672)
@@ -5,6 +5,7 @@
 import android.content.SharedPreferences;
 import android.net.Uri;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -175,7 +176,8 @@
         });
 
         btnAddToCart.setOnClickListener(v -> {
-            cartProducts.add(new CartItemQuantity(1, product.getID(), product.getVariants().get(0).getPrice().doubleValue()));
+            cartProducts.add(new CartItemQuantity(1, product.getID().toString(), product.getVariants().get(0).getPrice().doubleValue(),product.getVariants().get(0).getID()));
+            Log.e("Tango", product.getID().toString());
             defaultPreferences.edit().putString("cartProducts", new Gson().toJson(cartProducts)).apply();
             tvCartQuantity.setText(String.valueOf(1));
             cartProductsCount = cartProducts.size();
@@ -191,7 +193,7 @@
 
         ivIncreaseQuantity.setOnClickListener(v -> {
             int currentCartProductIndex = IntStream.range(0, cartProducts.size())
-                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))
+                    .filter(i -> cartProducts.get(i).getProductID().toString().equals(currentProductId))
                     .findFirst().orElse(-1);
             cartProducts.get(currentCartProductIndex).plusQuantity();
             updateQuantitySharedPreferencesUI(currentCartProductIndex);
@@ -199,7 +201,7 @@
 
         ivDecreaseQuantity.setOnClickListener(v -> {
             int currentCartProductIndex = IntStream.range(0, cartProducts.size())
-                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))
+                    .filter(i -> cartProducts.get(i).getProductID().toString().equals(currentProductId))
                     .findFirst().orElse(-1);
             if (cartProducts.get(currentCartProductIndex).getQuantity() > 1) {
                 cartProducts.get(currentCartProductIndex).minQuantity();
@@ -239,7 +241,7 @@
             cartProducts = new Gson().fromJson(defaultPreferences.getString("cartProducts", null), new TypeToken<List<CartItemQuantity>>() {
             }.getType());
             int currentCartProductIndex = IntStream.range(0, cartProducts.size())
-                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))
+                    .filter(i -> cartProducts.get(i).getProductID().toString().equals(currentProductId))
                     .findFirst().orElse(-1);
             if (currentCartProductIndex != -1)
                 updateQuantitySharedPreferencesUI(currentCartProductIndex);
@@ -304,7 +306,7 @@
     private void displayQuantityControls(boolean isAddedToCart) {
         if (isAddedToCart) {
             int currentCartProductIndex = IntStream.range(0, cartProducts.size())
-                    .filter(i -> cartProducts.get(i).getId().toString().equals(currentProductId))
+                    .filter(i -> cartProducts.get(i).getProductID().toString().equals(currentProductId))
                     .findFirst().orElse(-1);
             tvCartQuantity.setText(String.valueOf(cartProducts.get(currentCartProductIndex).getQuantity())); //update cart quantity in ui
             llCartQuantityControl.setVisibility(View.VISIBLE);
Index: app/src/main/res/layout/fragment_cart.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\"\r\n    tools:context=\".fragments.CartFragment\">\r\n\r\n    <include\r\n        android:id=\"@+id/llEmptyCart_CartFragment\"\r\n        layout=\"@layout/empty_cart_layout\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:layout_gravity=\"center\"\r\n        android:visibility=\"gone\" />\r\n\r\n    <LinearLayout\r\n        android:id=\"@+id/llContentCart_CartFragment\"\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\"\r\n        android:orientation=\"vertical\"\r\n        android:visibility=\"visible\">\r\n\r\n        <androidx.recyclerview.widget.RecyclerView\r\n            android:id=\"@+id/rvCartProducts_CartFragment\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"0dp\"\r\n            android:layout_weight=\"1\"\r\n            android:overScrollMode=\"never\"\r\n            tools:listitem=\"@layout/cart_item\" />\r\n\r\n        <androidx.cardview.widget.CardView\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"wrap_content\"\r\n            android:layout_marginBottom=\"8dp\"\r\n            app:cardCornerRadius=\"3dp\"\r\n            app:cardElevation=\"4dp\"\r\n            app:cardUseCompatPadding=\"true\">\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:orientation=\"vertical\"\r\n                android:padding=\"8dp\">\r\n\r\n                <LinearLayout\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:layout_marginBottom=\"8dp\"\r\n                    android:gravity=\"center\"\r\n                    android:orientation=\"horizontal\">\r\n\r\n                    <TextView\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:text=\"@string/subtotal\"\r\n                        android:textSize=\"17sp\"\r\n                        android:textStyle=\"bold\" />\r\n\r\n                    <TextView\r\n                        android:id=\"@+id/tvSubTotalPrice_CartFragment\"\r\n                        android:layout_width=\"wrap_content\"\r\n                        android:layout_height=\"wrap_content\"\r\n                        android:textSize=\"17sp\"\r\n                        android:textStyle=\"bold\" />\r\n                </LinearLayout>\r\n\r\n                <Button\r\n                    android:id=\"@+id/btnPaymentCashOnDelivery\"\r\n                    android:layout_width=\"match_parent\"\r\n                    android:layout_height=\"wrap_content\"\r\n                    android:text=\"@string/buy\" />\r\n            </LinearLayout>\r\n        </androidx.cardview.widget.CardView>\r\n    </LinearLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_cart.xml	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/res/layout/fragment_cart.xml	(date 1604320990017)
@@ -67,7 +67,7 @@
                 </LinearLayout>
 
                 <Button
-                    android:id="@+id/btnPaymentCashOnDelivery"
+                    android:id="@+id/checkoutButton"
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
                     android:text="@string/buy" />
Index: app/src/main/java/com/mahitab/ecommerce/models/CartItemQuantity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mahitab.ecommerce.models;\r\n\r\nimport com.shopify.graphql.support.ID;\r\n\r\npublic class CartItemQuantity {\r\n    public int quantity;\r\n    public double productPrice;\r\n    public ID id = null;\r\n    public String productID;\r\n\r\n    public CartItemQuantity(int quantity, ID id, double productPrice) {\r\n        this.quantity=quantity;\r\n        this.id=id;\r\n        this.productPrice=productPrice;\r\n    }\r\n\r\n    public void setProductPrice(double productPrice) {\r\n        this.productPrice = productPrice;\r\n    }\r\n\r\n    public ID getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(ID id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getProductID() {\r\n        return productID;\r\n    }\r\n\r\n    public void setProductID(String productID) {\r\n        this.productID = productID;\r\n    }\r\n\r\n    public void plusQuantity() {\r\n        quantity = quantity + 1;\r\n    }\r\n\r\n    public void minQuantity() {\r\n        if (quantity >= 1) {\r\n            quantity = quantity - 1;\r\n        }\r\n    }\r\n\r\n    public int getQuantity() {\r\n        return quantity;\r\n    }\r\n\r\n    public void setQuantity(int quantity) {\r\n        this.quantity = quantity;\r\n    }\r\n\r\n    public double getProductPrice() {\r\n        return productPrice;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/mahitab/ecommerce/models/CartItemQuantity.java	(revision 1c7023bb6f853aa342009fd8e6ae8dbb348d6a1e)
+++ app/src/main/java/com/mahitab/ecommerce/models/CartItemQuantity.java	(date 1604320907980)
@@ -5,35 +5,30 @@
 public class CartItemQuantity {
     public int quantity;
     public double productPrice;
+    public String productID;
     public ID id = null;
-    public String productID;
 
-    public CartItemQuantity(int quantity, ID id, double productPrice) {
-        this.quantity=quantity;
-        this.id=id;
-        this.productPrice=productPrice;
-    }
-
-    public void setProductPrice(double productPrice) {
+    public CartItemQuantity(int quantity, String productID,double productPrice, ID id) {
+        this.id = id;
+        this.quantity = quantity;
+        this.productID = productID;
         this.productPrice = productPrice;
     }
 
     public ID getId() {
         return id;
     }
-
     public void setId(ID id) {
         this.id = id;
     }
+    public void setProductID(String productID) {
+        this.productID = productID;
+    }
 
     public String getProductID() {
         return productID;
     }
 
-    public void setProductID(String productID) {
-        this.productID = productID;
-    }
-
     public void plusQuantity() {
         quantity = quantity + 1;
     }
